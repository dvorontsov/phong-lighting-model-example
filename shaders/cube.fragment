#version 330 core

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};


in vec3 Normal;
in vec3 FragPos;

out vec4 FragColor;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

uniform bool isAmbient;
uniform bool isDiffuse;
uniform bool isSpecular;


void main()
{
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - FragPos);
	
	// Ambient
	vec3 ambient = vec3(0);
	if(isAmbient)
	{
		ambient = light.ambient * material.ambient;
	}

	// Diffuse
	vec3 diffuse = vec3(0);	
	if(isDiffuse)
	{
		float diff = max(dot(norm, lightDir), 0.0);
		diffuse = light.diffuse * (diff * material.diffuse);
	}
	
	// Specular
	vec3 specular = vec3(0);
	if(isSpecular)
	{
		// Specular
		vec3 viewDir = normalize(viewPos - FragPos);
		vec3 reflectDir = reflect(-lightDir, norm);
		float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
		specular = light.specular * (material.specular * spec);
	}

	// Result
	vec3 result = (ambient + diffuse + specular);
    FragColor = vec4(result, 1.0);
}